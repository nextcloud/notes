{"version":3,"sources":["app.js","directives/autofocus.js","directives/editor.js","directives/tooltip.js","services/debounce.js","services/is.js","services/notesmodel.js","services/savequeue.js","services/urlFinder.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","controllers/notessettingscontroller.js","app.min.js","filters/and.js","filters/noteTitle.js","filters/wordCount.js"],"names":["angular","$","requestToken","SimpleMDE","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","directive","restrict","link","scope","element","focus","$timeout","urlFinder","simplemde","spellChecker","autoDownloadFontAwesome","toolbar","status","forceSync","editorElement","codemirror","getWrapperElement","content","on","$apply","onEdit","updateTitle","event","ctrlKey","url","this","isDefined","window","open","tooltip","container","factory","func","delay","timeout","context","args","arguments","cancel","apply","notesIds","prototype","addAll","i","add","updateIfExists","error","dialogs","alert","errorMessage","t","updated","title","favorite","push","remove","splice","SaveQueue","_queue","_flushLock","_manualSaveActive","_flush","addManual","keys","Object","self","requests","put","_noteUpdateRequest","bind","_saveFailed","all","response","unsaved","isSaving","isManualSaving","prev","next","text","$scope","init","lastViewedNote","useSearchAPI","defaultTitle","document","Notification","showTemporary","initSearch","search","OCA","Search","query","css","hasClass","click","$routeParams","debounce","$document","replace","trim","split","autoSave","manualSave","unbind","metaKey","String","fromCharCode","which","toLowerCase","preventDefault","toggleDistractionFree","launchIntoFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getElementById","$watch","newValue","$window","route","notesLoaded","notesResource","getList","create","post","$emit","toggleFavorite","customPUT","onbeforeunload","extensions","settings","isObject","msg","location","reload","filter","$filter","items","searchString","searchValues","filtered","wordCount","n","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.dialogs.alert(\n                    this.notesIds[id].errorMessage,\n                    t('notes','An error occurred!')\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.favorite = updated.favorite;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage, useSearchAPI) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        if(useSearchAPI) {\n            $scope.initSearch();\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n    };\n\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i++) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n});\n","app.controller('NotesSettingsController',\n               function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.showTemporary(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n});\n","(function(angular, $, requestToken, SimpleMDE, undefined){'use strict';/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig([\"$provide\", \"$routeProvider\", \"RestangularProvider\", \"$httpProvider\", \"$windowProvider\", function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: [\"$route\", \"$q\", \"is\", \"Restangular\", function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }]\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}]).run([\"$rootScope\", \"$location\", \"NotesModel\", function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n\n/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.dialogs.alert(\n                    this.notesIds[id].errorMessage,\n                    t('notes','An error occurred!')\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.favorite = updated.favorite;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', [\"$q\", function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n}]);\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', [\"$scope\", \"$location\", \"is\", function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage, useSearchAPI) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        if(useSearchAPI) {\n            $scope.initSearch();\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', [\"$routeParams\", \"$scope\", \"NotesModel\", \"SaveQueue\", \"note\", \"debounce\", \"$document\", function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', [\"$routeParams\", \"$scope\", \"$location\", \"Restangular\", \"NotesModel\", \"$window\", function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n    };\n\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i++) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n}]);\n\napp.controller('NotesSettingsController',\n               [\"$scope\", \"Restangular\", \"$document\", function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.showTemporary(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n}]);\n\n/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n\n/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n        \tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n\napp.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n})(angular, jQuery, oc_requesttoken, SimpleMDE);","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n        \tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n"]}