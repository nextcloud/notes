{"version":3,"sources":["app.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","controllers/notessettingscontroller.js","app.min.js","directives/autofocus.js","directives/editor.js","directives/tooltip.js","filters/and.js","filters/noteTitle.js","filters/wordCount.js","services/debounce.js","services/is.js","services/notesmodel.js","services/savequeue.js","services/urlFinder.js"],"names":["angular","$","requestToken","SimpleMDE","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","errorMessage","defaultTitle","document","title","Notification","showTemporary","search","$routeParams","SaveQueue","debounce","$document","updateIfExists","isSaving","isManualSaving","updateTitle","content","replace","trim","split","t","onEdit","unsaved","autoSave","add","manualSave","error","addManual","unbind","bind","event","ctrlKey","metaKey","String","fromCharCode","which","toLowerCase","preventDefault","toggleDistractionFree","launchIntoFullscreen","element","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getElementById","$watch","newValue","$window","route","notesResource","all","getList","addAll","create","post","remove","$emit","toggleFavorite","customPUT","favorite","onbeforeunload","i","extensions","settings","isObject","on","msg","put","window","location","reload","directive","restrict","link","scope","focus","$timeout","urlFinder","simplemde","spellChecker","autoDownloadFontAwesome","toolbar","status","forceSync","editorElement","codemirror","getWrapperElement","$apply","url","this","isDefined","open","tooltip","container","filter","$filter","items","searchString","searchValues","filtered","wordCount","n","factory","func","delay","timeout","context","args","arguments","cancel","apply","notesIds","prototype","dialogs","alert","updated","push","splice","_queue","_flushLock","_manualSaveActive","_flush","keys","Object","self","requests","_noteUpdateRequest","_saveFailed","response","prev","next","text","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote,errorMessage) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage !==0){\n            OC.Notification.showTemporary(errorMessage);\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n    };\n\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i++) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n});\n","app.controller('NotesSettingsController',\n               function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied ...');\n        OC.Notification.showTemporary(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n});\n","(function(angular, $, requestToken, SimpleMDE, undefined){'use strict';/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig([\"$provide\", \"$routeProvider\", \"RestangularProvider\", \"$httpProvider\", \"$windowProvider\", function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: [\"$route\", \"$q\", \"is\", \"Restangular\", function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }]\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}]).run([\"$rootScope\", \"$location\", \"NotesModel\", function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', [\"$scope\", \"$location\", \"is\", function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote,errorMessage) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage !==0){\n            OC.Notification.showTemporary(errorMessage);\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', [\"$routeParams\", \"$scope\", \"NotesModel\", \"SaveQueue\", \"note\", \"debounce\", \"$document\", function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', [\"$routeParams\", \"$scope\", \"$location\", \"Restangular\", \"NotesModel\", \"$window\", function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n    };\n\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i++) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n}]);\n\napp.controller('NotesSettingsController',\n               [\"$scope\", \"Restangular\", \"$document\", function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied ...');\n        OC.Notification.showTemporary(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n\n/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n\n/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n\n/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n        \tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n\napp.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.dialogs.alert(\n                    this.notesIds[id].errorMessage,\n                    t('notes','An error occurred!')\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.favorite = updated.favorite;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', [\"$q\", function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n}]);\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n})(angular, jQuery, oc_requesttoken, SimpleMDE);","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n        \tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.dialogs.alert(\n                    this.notesIds[id].errorMessage,\n                    t('notes','An error occurred!')\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.favorite = updated.favorite;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n"]}