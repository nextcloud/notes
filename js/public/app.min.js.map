{"version":3,"sources":["app.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","controllers/notessettingscontroller.js","app.min.js","directives/autofocus.js","directives/editor.js","directives/tooltip.js","filters/and.js","filters/wordCount.js","services/debounce.js","services/is.js","services/notesmodel.js","services/savequeue.js","services/urlFinder.js"],"names":["angular","$","requestToken","SimpleMDE","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","errorMessage","useSearchAPI","defaultTitle","document","title","Notification","showTemporary","initSearch","search","OCA","Search","query","$apply","css","hasClass","click","$routeParams","SaveQueue","debounce","$document","$timeout","updateIfExists","isSaving","isManualSaving","updateTitle","content","replace","trim","split","t","onEdit","unsaved","autoSave","add","manualSave","error","addManual","editCategory","showEditCategory","val","category","autocomplete","source","getCategories","minLength","position","my","at","of","open","width","innerWidth","addClass","insertAfter","focus","closeCategory","unbind","bind","event","ctrlKey","metaKey","String","fromCharCode","which","toLowerCase","preventDefault","toggleDistractionFree","launchIntoFullscreen","element","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getElementById","$watch","newValue","$window","route","notesLoaded","notesResource","all","getList","addAll","create","post","remove","$emit","toggleFavorite","customPUT","favorite","target","blur","onbeforeunload","i","extensions","settings","isObject","on","msg","show","put","window","location","reload","directive","restrict","link","scope","urlFinder","simplemde","spellChecker","autoDownloadFontAwesome","toolbar","status","forceSync","editorElement","codemirror","getWrapperElement","url","this","isDefined","tooltip","container","filter","$filter","items","searchString","searchValues","filtered","wordCount","n","factory","func","delay","timeout","context","args","arguments","cancel","apply","notesIds","prototype","type","updated","push","splice","nthIndexOf","str","pattern","indexOf","_","memoize","maxLevel","details","categories","cat","index","substring","result","name","count","_queue","_flushLock","_manualSaveActive","_flush","keys","Object","self","requests","_noteUpdateRequest","_saveFailed","response","prev","next","text","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage, useSearchAPI) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0 && $location.path()==='') {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        if(useSearchAPI) {\n            $scope.initSearch();\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document, $timeout) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $scope.editCategory = false;\n    $scope.showEditCategory = function() {\n        $('#category').val($scope.note.category);\n        $scope.editCategory = true;\n        $('#category').autocomplete({\n            source: NotesModel.getCategories(NotesModel.getAll(), 0, false),\n            minLength: 0,\n            position: { my: 'left bottom', at: 'left top', of: '#category' },\n            open: function() {\n                 $timeout(function() {\n                     var width = $('form.category').innerWidth() - 2;\n                     $('.ui-autocomplete.ui-menu').width(width);\n                 });\n            },\n        }).autocomplete('widget').addClass('category-autocomplete');\n        // fix space between input and confirm-button\n        $('form.category .icon-confirm').insertAfter('#category');\n\n        $timeout(function() {\n            $('#category').focus();\n                $('#category').autocomplete('search', '');\n        });\n    };\n    $scope.closeCategory = function() {\n        $scope.editCategory = false;\n        var category = $('#category').val();\n        if($scope.note.category !== category) {\n            $scope.note.category = category;\n            $scope.note.unsaved = true;\n            $scope.autoSave($scope.note);\n        }\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId, event) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n        event.target.blur();\n    };\n\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i+=1) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n});\n","app.controller('NotesSettingsController',\n               function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.show(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n});\n","(function(angular, $, requestToken, SimpleMDE, undefined){'use strict';/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig([\"$provide\", \"$routeProvider\", \"RestangularProvider\", \"$httpProvider\", \"$windowProvider\", function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: [\"$route\", \"$q\", \"is\", \"Restangular\", function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }]\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}]).run([\"$rootScope\", \"$location\", \"NotesModel\", function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', [\"$scope\", \"$location\", \"is\", function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote, errorMessage, useSearchAPI) {\n        $scope.defaultTitle = document.title;\n\n        if(lastViewedNote !== 0 && $location.path()==='') {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage) {\n            OC.Notification.showTemporary(errorMessage);\n        }\n        if(useSearchAPI) {\n            $scope.initSearch();\n        }\n    };\n\n    $scope.search = '';\n    $scope.defaultTitle = null;\n\n    $scope.initSearch = function() {\n        new OCA.Search(\n            function (query) {\n                $scope.search = query;\n                $scope.$apply();\n                if($('#app-navigation-toggle').css('display')!=='none' &&\n                        !$('body').hasClass('snapjs-left')) {\n                    $('#app-navigation-toggle').click();\n                }\n            },\n            function () {\n                $scope.search = '';\n                $scope.$apply();\n            }\n        );\n    };\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', [\"$routeParams\", \"$scope\", \"NotesModel\", \"SaveQueue\", \"note\", \"debounce\", \"$document\", \"$timeout\", function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document, $timeout) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        var content = $scope.note.content;\n\n        // prepare content: remove markdown characters and empty spaces\n        content = content.replace(/^\\s*[*+-]\\s+/mg, ''); // list item\n        content = content.replace(/^#+\\s+(.*?)\\s*#*$/mg, '$1'); // headline\n        content = content.replace(/^(=+|-+)$/mg, ''); // separate headline\n        content = content.replace(/(\\*+|_+)(.*?)\\1/mg, '$2'); // emphasis\n\n        // prevent directory traversal, illegal characters\n        content = content.replace(/[\\*\\|\\/\\\\\\:\\\"<>\\?]/g, '');\n        // prevent unintended file names\n        content = content.replace(/^[\\. ]+/mg, '');\n\n        // generate title from the first line of the content\n        $scope.note.title = content.trim().split(/\\r?\\n/, 2)[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $scope.editCategory = false;\n    $scope.showEditCategory = function() {\n        $('#category').val($scope.note.category);\n        $scope.editCategory = true;\n        $('#category').autocomplete({\n            source: NotesModel.getCategories(NotesModel.getAll(), 0, false),\n            minLength: 0,\n            position: { my: 'left bottom', at: 'left top', of: '#category' },\n            open: function() {\n                 $timeout(function() {\n                     var width = $('form.category').innerWidth() - 2;\n                     $('.ui-autocomplete.ui-menu').width(width);\n                 });\n            },\n        }).autocomplete('widget').addClass('category-autocomplete');\n        // fix space between input and confirm-button\n        $('form.category .icon-confirm').insertAfter('#category');\n\n        $timeout(function() {\n            $('#category').focus();\n                $('#category').autocomplete('search', '');\n        });\n    };\n    $scope.closeCategory = function() {\n        $scope.editCategory = false;\n        var category = $('#category').val();\n        if($scope.note.category !== category) {\n            $scope.note.category = category;\n            $scope.note.unsaved = true;\n            $scope.autoSave($scope.note);\n        }\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n    $scope.$watch(function() {\n        return $scope.note.title;\n    }, function(newValue) {\n        if(newValue) {\n            document.title = newValue + ' - ' + $scope.defaultTitle;\n        } else {\n            document.title = $scope.defaultTitle;\n        }\n    });\n\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', [\"$routeParams\", \"$scope\", \"$location\", \"Restangular\", \"NotesModel\", \"$window\", function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notesLoaded = false;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n        $scope.notesLoaded = true;\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId, event) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n        event.target.blur();\n    };\n\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i+=1) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n}]);\n\napp.controller('NotesSettingsController',\n               [\"$scope\", \"Restangular\", \"$document\", function($scope, Restangular, $document) {\n    'use strict';\n\n    $scope.extensions = ['.txt', '.md'];\n\n    Restangular.one('settings').get().then(function(settings) {\n        if(angular.isObject(settings)) {\n            $scope.settings = settings;\n        } else {\n            $scope.settings = Restangular.one('settings');\n        }\n    });\n\n    $document.on('change', '#notesPath', function() {\n        var msg = t('notes', 'Please wait while new settings are applied…');\n        OC.Notification.show(msg);\n        $scope.settings.put().then(function() {\n            window.location.reload(true);\n        });\n    });\n\n    $document.on('change', '#fileSuffix', function() {\n        $scope.settings.put();\n    });\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n\n/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n\n            element.on('click', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n\n/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n\napp.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.Notification.show(\n                    this.notesIds[id].errorMessage,\n                    { type: 'error' }\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                // only update if it hat full data\n                if(updated.content !== null) {\n                    note.title = updated.title;\n                    note.modified = updated.modified;\n                    note.content = updated.content;\n                    note.favorite = updated.favorite;\n                    note.category = updated.category;\n                    note.error = updated.error;\n                    note.errorMessage = updated.errorMessage;\n                }\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        },\n    nthIndexOf: function(str, pattern, n) {\n        var i = -1;\n        while (n-- && i++ < str.length) {\n            i = str.indexOf(pattern, i);\n            if (i < 0) {\n                break;\n            }\n        }\n        return i;\n    },\n\n    getCategories: _.memoize(function (notes, maxLevel, details) {\n        var categories = {};\n        for(var i=0; i<notes.length; i+=1) {\n            var cat = notes[i].category;\n            if(maxLevel>0) {\n                var index = this.nthIndexOf(cat, '/', maxLevel);\n                if(index>0) {\n                    cat = cat.substring(0, index);\n                }\n            }\n            if(categories[cat]===undefined) {\n                categories[cat] = 1;\n            } else {\n                categories[cat] += 1;\n            }\n        }\n        var result = [];\n        for(var category in categories) {\n            if(details) {\n                result.push({ name: category, count: categories[category]});\n            } else if(category) {\n                result.push(category);\n            }\n        }\n        if(!details) {\n            result.sort();\n        }\n        return result;\n    }),\n\n    };\n\n    return new NotesModel();\n});\n\n/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', [\"$q\", function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n}]);\n\n/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n})(angular, jQuery, oc_requesttoken, SimpleMDE);","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\t\t\tsimplemde.codemirror.focus();\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n\n            element.on('click', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.Notification.show(\n                    this.notesIds[id].errorMessage,\n                    { type: 'error' }\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                // only update if it hat full data\n                if(updated.content !== null) {\n                    note.title = updated.title;\n                    note.modified = updated.modified;\n                    note.content = updated.content;\n                    note.favorite = updated.favorite;\n                    note.category = updated.category;\n                    note.error = updated.error;\n                    note.errorMessage = updated.errorMessage;\n                }\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        },\n    nthIndexOf: function(str, pattern, n) {\n        var i = -1;\n        while (n-- && i++ < str.length) {\n            i = str.indexOf(pattern, i);\n            if (i < 0) {\n                break;\n            }\n        }\n        return i;\n    },\n\n    getCategories: _.memoize(function (notes, maxLevel, details) {\n        var categories = {};\n        for(var i=0; i<notes.length; i+=1) {\n            var cat = notes[i].category;\n            if(maxLevel>0) {\n                var index = this.nthIndexOf(cat, '/', maxLevel);\n                if(index>0) {\n                    cat = cat.substring(0, index);\n                }\n            }\n            if(categories[cat]===undefined) {\n                categories[cat] = 1;\n            } else {\n                categories[cat] += 1;\n            }\n        }\n        var result = [];\n        for(var category in categories) {\n            if(details) {\n                result.push({ name: category, count: categories[category]});\n            } else if(category) {\n                result.push(category);\n            }\n        }\n        if(!details) {\n            result.sort();\n        }\n        return result;\n    }),\n\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n"]}